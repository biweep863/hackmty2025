datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

/// Usuarios ya existen en tu sistema SSO; aquí asumimos que
/// tienes una tabla User sincronizada (o la referenciamos por id).
model User {
    id               String            @id
    email            String            @unique
    name             String?
    // Relación con carpool
    carpoolerProfile CarpoolerProfile?
    bookings         Booking[]
    tripsOffered     Trip[]            @relation("TripDriver")
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
}

/// Sedes del banco (orígenes/destinos frecuentes)
model Site {
    id        String   @id @default(cuid())
    code      String   @unique
    name      String
    address   String?
    lat       Decimal? @db.Decimal(9, 6)
    lng       Decimal? @db.Decimal(9, 6)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    pickupPoints PickupPoint[]

    // Rutas donde este Site es el origen (A)
    routeTemplatesFrom RouteTemplate[] @relation("FromSiteTemplates")
    // Rutas donde este Site es el destino (B)
    routeTemplatesTo   RouteTemplate[] @relation("ToSiteTemplates")
}

model CarpoolerProfile {
    id           String  @id @default(cuid())
    userId       String  @unique
    vehicleMake  String?
    vehicleModel String?
    vehicleColor String?
    plateLast4   String? // sin datos sensibles
    seatsDefault Int     @default(3) // asientos ofrecidos por defecto
    isVerified   Boolean @default(false)

    user           User            @relation(fields: [userId], references: [id])
    availabilities Availability[]
    routeTemplates RouteTemplate[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
}

/// Puntos de recogida (predefinidos por Seguridad/Facilities)
model PickupPoint {
    id        String    @id @default(cuid())
    siteId    String
    label     String
    lat       Decimal?  @db.Decimal(9, 6)
    lng       Decimal?  @db.Decimal(9, 6)
    isActive  Boolean   @default(true)
    site      Site      @relation(fields: [siteId], references: [id])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Trip      Trip[]
    Booking   Booking[]

    @@index([siteId])
}

/// Plantilla de ruta A→B del carpoolero (p.ej. Casa→Sede Centro)
model RouteTemplate {
    id          String @id @default(cuid())
    carpoolerId String

    // Origen
    fromSiteId String?
    fromSite   Site?   @relation("FromSiteTemplates", fields: [fromSiteId], references: [id])

    fromLabel String
    fromLat   Decimal? @db.Decimal(9, 6)
    fromLng   Decimal? @db.Decimal(9, 6)

    // Destino
    toSiteId String?
    toSite   Site?   @relation("ToSiteTemplates", fields: [toSiteId], references: [id])

    toLabel String
    toLat   Decimal? @db.Decimal(9, 6)
    toLng   Decimal? @db.Decimal(9, 6)

    isActive Boolean @default(true)

    carpooler    CarpoolerProfile @relation(fields: [carpoolerId], references: [id])
    Availability Availability[]
    Trip         Trip[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([carpoolerId])
    @@index([fromSiteId])
    @@index([toSiteId])
}

/// Disponibilidad del carpoolero: puntual o recurrente
model Availability {
    id              String           @id @default(cuid())
    carpoolerId     String
    routeTemplateId String
    type            AvailabilityType
    // puntual
    startAt         DateTime?
    endAt           DateTime?
    // recurrente (semana)
    // 0=Dom ... 6=Sáb; se guarda como arreglo de ints (Postgres)
    weekdayMask     Int[] // e.g. [1,2,3,4,5] para Lun-Vie
    timeWindowStart String? // "08:00"
    timeWindowEnd   String? // "09:00"
    seats           Int              @default(3)
    isActive        Boolean          @default(true)

    carpooler     CarpoolerProfile @relation(fields: [carpoolerId], references: [id])
    routeTemplate RouteTemplate    @relation(fields: [routeTemplateId], references: [id])
    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt

    @@index([carpoolerId])
    @@index([routeTemplateId])
    @@index([type, startAt, endAt])
}

enum AvailabilityType {
    ONE_OFF
    RECURRING
}

/// Viaje ofertado (instancia concreta que los usuarios pueden reservar)
model Trip {
    id                String     @id @default(cuid())
    driverId          String
    routeTemplateId   String
    departureAt       DateTime
    seatsTotal        Int
    seatsTaken        Int        @default(0)
    // punto de recogida acordado (predefinido o libre)
    pickupPointId     String?
    pickupCustomLabel String?
    pickupLat         Decimal?   @db.Decimal(9, 6)
    pickupLng         Decimal?   @db.Decimal(9, 6)
    status            TripStatus @default(OPEN)

    driver        User          @relation("TripDriver", fields: [driverId], references: [id])
    routeTemplate RouteTemplate @relation(fields: [routeTemplateId], references: [id])
    pickupPoint   PickupPoint?  @relation(fields: [pickupPointId], references: [id])
    bookings      Booking[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([driverId, departureAt])
    @@index([status, departureAt])
}

enum TripStatus {
    OPEN
    LOCKED // saliendo pronto / ya no acepta nuevas
    STARTED
    COMPLETED
    CANCELED
}

/// Reserva (solicitud) de asiento por parte de un usuario
model Booking {
    id            String        @id @default(cuid())
    tripId        String
    riderId       String
    status        BookingStatus @default(PENDING)
    // punto de recogida elegido dentro de los sugeridos
    pickupPointId String?
    pickupNote    String?

    trip        Trip         @relation(fields: [tripId], references: [id])
    rider       User         @relation(fields: [riderId], references: [id])
    pickupPoint PickupPoint? @relation(fields: [pickupPointId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([tripId, riderId]) // un rider no solicita dos veces el mismo trip
    @@index([riderId, status])
}

enum BookingStatus {
    PENDING
    ACCEPTED
    REJECTED
    CANCELED_BY_RIDER
    CANCELED_BY_DRIVER
}
