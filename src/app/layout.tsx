// "use client";

// import { ReactNode, useState } from "react";
// import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
// import { httpBatchLink } from "@trpc/client";
// import { trpc } from "~/utils/trpc";
// import SuperJSON from "superjson";

// import { TRPCReactProvider } from "~/trpc/react";
// import { toast, Toaster } from "react-hot-toast";
// export const metadata: Metadata = {
//   title: "Create T3 App",
//   description: "Generated by create-t3-app",
//   icons: [{ rel: "icon", url: "/favicon.ico" }],
// };
// function getBaseUrl() {
//   if (typeof window !== "undefined") return "";
//   return "http://localhost:3000"; // ajusta segÃºn tu entorno
// }

// export default function RootLayout({ children }: { children: ReactNode }) {
//   const [queryClient] = useState(() => new QueryClient());
//   const [trpcClient] = useState(() =>
//     trpc.createClient({
//       links: [
//         httpBatchLink({
//           url: `${getBaseUrl()}/api/trpc`,
//           fetch: (input, init) =>
//             fetch(input, { ...init, credentials: "include" }),
//         }),
//       ],
//       transformer: SuperJSON,
//     }),
//   );

//   return (
//     <html lang="es">
//       <body>
//         <Toaster />
//         <TRPCReactProvider>{children}</TRPCReactProvider>
//         <trpc.Provider client={trpcClient} queryClient={queryClient}>
//           <QueryClientProvider client={queryClient}>
//             {children}
//           </QueryClientProvider>
//         </trpc.Provider>
//       </body>
//     </html>
//   );
// }

import "~/styles/globals.css";
import { Toaster } from "react-hot-toast";
import { type Metadata } from "next";
import { Geist } from "next/font/google";
import Navbar from "./_components/navbar";

import { TRPCReactProvider } from "~/trpc/react";
import AuthGate from "~/app/_components/AuthGate";

export const metadata: Metadata = {
  title: "CoRide",
  description: "Generated by Mapaches",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

const geist = Geist({
  subsets: ["latin"],
  variable: "--font-geist-sans",
});

export default function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  return (
    <html lang="en" className={`${geist.variable}`}>
      <body>
        <Toaster />
        <Navbar />
        <TRPCReactProvider>
          <div className="min-h-screen" style={{ paddingBottom: 'calc(env(safe-area-inset-bottom) + 4rem)' }}>
            <AuthGate>{children}</AuthGate>
          </div>
        </TRPCReactProvider>
      </body>
    </html>
  );
}
